@use "sass:list";
@use "sass:string";
@use "sass:math";

$font: (
    xxxl: 54 1.2,
    xxl: 36 1.3,
    xl: 24 1.2
);

@mixin font($size:null, $weight:null){
    @each $name, $fs in $font {
        @if $name == $size {
            font-size: list.nth($fs, 1) * 1px;
            line-height: list.nth($fs, 2);
            @if $weight != null {
                font-weight: $weight;
            }
        }
    }
}

// @function
@function remove-unit($value) {
  @return math.div($value, ($value * 0 + 1));
}

@function rem($px, $base: 16) {
  @return (remove-unit(math.div($px, $base))) * 1rem;
}
@function split($selector, $append, $order, $pos){
  $arr         : string.split($selector, ' ');
  $length      : length($arr);
  $order       : if( $order >= $length, 1, $length - $order);
  $replace     : nth($arr, $order);
  $column      : string.split($replace, ':', $limit: 1);
  $replaceWord : '';

  @if( length($column) > 1) {
    $replaceWord : str-insert( nth($column, 1), $append + ':' + nth($column, -1), $pos);
  } @else {
    $replaceWord : str-insert($replace, $append, $pos)
  }
  
  $reArray : set-nth($arr, $order , $replaceWord);
  $list    : join((),$reArray, $separator: space);
  
  @return $list;
}

// @mixin
/*!
	@param {String} $append: 추가할 class 또는 element
	@param {Number} $pos: 선택 된 클래스 뒤에 append할지 앞에 append할지 선택
*/
@mixin append($append, $order: 1, $pos: -1 ) {
  $self: #{&};

  @at-root #{fn.split($self, $append, $order, $pos)} {
		@content;
	}
}